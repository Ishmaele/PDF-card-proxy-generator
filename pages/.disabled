# import streamlit as st

# from nrdb_parser import nrdbAPI
# from img_transform import resize_images, create_3x3_sheets, imgUpscaler
# from io import BytesIO
# from PIL import Image
# from collections import OrderedDict

# import requests # dev

# st.set_page_config(
#     page_title="NRDB module",
#     page_icon=":world_map:Ô∏è",
#     layout="wide",
# )

# st.markdown(
#     """
#     <style>
#     img {
#         cursor: pointer;
#         transition: all .2s ease-in-out;
#     }
#     img:hover {
#         transform: scale(1.1);
#     }
#     </style>
#     """,
#     unsafe_allow_html=True,
# )

# "# NetrunnerDB module"
# """This module seeks to replicate https://proxynexus.net/ functionality, except it doesn't store image data in a local DB. Instead, it pulls card images from netrunnerdb.com API."""
# st.divider()
# """NRDB images are low quality JPEGs. The image quality can be significantly improved by applying the ML upscaling algorithm (edsr-base model, 3x scaling). *This will increase PDF generation time significantly.*"""

# left, right = st.columns([0.65, 0.35])

# with left:
#     # 3-column grid for printing card images
#     grid = st.columns(3, gap='small')

# with right:
#     # main module UI
#     tab1, tab2, tab3 = st.tabs(["Decklist", "Card list", "Set"])


#     with tab1:
#         # decklist id mode
#         deck_id = st.text_input(label='Enter a decklist URL from NetrunnerDB', placeholder='81524', value=None)
#         st.caption('Only Published decklist are supported currently. eg. https://netrunnerdb.com/en/decklist/xxxxx/deck-name https://netrunnerdb.com/en/deck/view/xxxxxxx ')
#         perform_upscale = st.checkbox('Perform ML upscale (slow, higher quality)')


#         if deck_id is not None:
#             if st.button(label='Start'):
#                 nrdb_api = nrdbAPI(deck_id)
#                 with st.status("Polling NRDB API..."):
#                     #get cards list from nrdb
#                     deck_data = nrdb_api.get_decklist()
#                     st.write(deck_data)
#                     #get images from nrdb
#                     nrdb_api.get_decklist_images(deck_data, False)
                    
#                 if perform_upscale:
#                     upscaler = imgUpscaler('edsr-base', 3)
#                     temp = []
#                     bar = st.progress(0, text='Upscaling images...')
#                     i = 1
#                     # with st.status("Upscaling"):
#                     for bytes_file in nrdb_api.nrdb_proxy_list:
#                         image = Image.open(bytes_file)
#                         image_bytes = upscaler.process(image)
#                         temp.append(BytesIO(image_bytes))
#                         bar.progress(int(100 * i / len(nrdb_api.nrdb_proxy_list)), text='Upscaling images...')
#                         i+=1
#                     nrdb_api.nrdb_proxy_list = temp

#                 nrdb_api.resized_proxy_list = resize_images(nrdb_api.nrdb_proxy_list)

#                 with st.status("Generating PDF..."):
#                     #make 3x3 image grids
#                     sheets = create_3x3_sheets(nrdb_api.resized_proxy_list, nrdb_api.MODE)
#                     st.write('Total sheets: ', len(sheets))

#                     if len(sheets) > 0:
#                         img_byte_arr = BytesIO()
#                         sheets[0].save(img_byte_arr, format='PDF', save_all=True, append_images=sheets[1:])

#                 if len(sheets) > 0:
#                     st.download_button(':arrow_down: :red[Download PDF]', img_byte_arr, file_name=f'{deck_id}.pdf')

#     with tab2:
#         # card list mode
#         card_input = st.text_area(label='Enter card names below', placeholder='Rebirth\nThe Twins\nDescent', value=None, key='input_card_list')
#         if card_input:
#             entered_cards_list = list(OrderedDict.fromkeys(card_input.splitlines()))
#             st.write(f'Total *unique* cards: {len(entered_cards_list)}')

#             cards_url = "https://netrunnerdb.com/api/2.0/public/cards"
#             base_image_url = "https://card-images.netrunnerdb.com/v2/large/"

#             nrdb_api = nrdbAPI()
#             # all cards info
#             if 'cards_data' not in st.session_state:
#                 st.session_state['cards_data'] = nrdb_api.get_all_cards()

#             # img storage is persistent between reruns because we don't want to poll API every time
#             if 'imgs' not in st.session_state:
#                 st.session_state['imgs'] = {}

#             # filter cards (search)
#             result_cards = {}
#             for card_name in entered_cards_list:
#                 filtered_for_name = [card for card in st.session_state['cards_data']['data'] if any([card_name.lower().strip() in card['stripped_title'].lower(), card_name.lower().strip() in card['title'].lower()])]
#                 result_cards[card_name] = {'cards': filtered_for_name, 'imgs' : {}}

#             perform_upscale = st.checkbox('Perform ML upscale (slow, higher quality)', key='upscale_2')

#             # get card imgs
#             if st.button(label='Get Images', key='get_imgs_2'):
#                 with st.status("Polling NRDB API..."):
#                     imgs = {}
#                     for item in result_cards.values():
#                         nrdb_api.get_cardlist_images(item['cards'], imgs)

#                     st.session_state['imgs'] = imgs # persistent
#                     st.write(result_cards)
            
#             alt_art_selectors = st.container()
#             alt_art_selectors.write('Alt Arts')
#             pre_final = []
#             # display cards
#             if len(st.session_state['imgs']) > 0:
#                 # left column 3x grid
#                 col = 0
#                 for item in result_cards:
#                     if len(result_cards[item]['cards']) > 1:
#                         # multiple choice
#                         with grid[col]:
#                             chosen_card_code = alt_art_selectors.selectbox(label=item, options=[f'{card['code']}' for card in result_cards[item]['cards']])
#                             if chosen_card_code in st.session_state['imgs'].keys():
#                                 st.image(st.session_state['imgs'][chosen_card_code], width=200, caption=item[:32])
#                                 pre_final.append(st.session_state['imgs'][chosen_card_code])
#                             else:
#                                 st.write('Press :red[Get Images] to refresh')

#                     if len(result_cards[item]['cards']) == 1:
#                         id = result_cards[item]['cards'][0]['code']
#                         with grid[col]:
#                             if id in st.session_state['imgs'].keys():
#                                 st.image(st.session_state['imgs'][id], width=200, caption=item[:32])
#                                 pre_final.append(st.session_state['imgs'][id])
#                             else:
#                                 st.write(f'{result_cards[item]['cards'][0]['title']}  \nPress :red[Get Images] to refresh')

#                     col = (col + 1) % 3

#             if perform_upscale:
#                 upscaler = imgUpscaler('edsr-base', 3)
#                 temp = []
#                 bar = st.progress(0, text='Upscaling images...')
#                 i = 1
#                 # with st.status("Upscaling"):
#                 for bytes_file in pre_final:
#                     image = Image.open(bytes_file)
#                     image_bytes = upscaler.process(image)
#                     temp.append(BytesIO(image_bytes))
#                     bar.progress(int(100 * i / len(pre_final)), text='Upscaling images...')
#                     i+=1
#                 pre_final = temp

#             # print result to PDF
#             resized_proxy_list = resize_images(pre_final)

#             with st.status("Generating PDF..."):
#                 #make 3x3 image grids
#                 sheets = create_3x3_sheets(resized_proxy_list, nrdb_api.MODE)
#                 st.write('Total sheets: ', len(sheets))

#                 if len(sheets) > 0:
#                     img_byte_arr = BytesIO()
#                     sheets[0].save(img_byte_arr, format='PDF', save_all=True, append_images=sheets[1:])

#             if len(sheets) > 0:
#                 st.download_button(':arrow_down: :red[Download PDF]', img_byte_arr, file_name='PROXY-LIST.pdf')

#     with tab3:
#         # set mode
#         nrdb_api = nrdbAPI()

#         # all cards info (persistent)
#         if 'cards_data' not in st.session_state:
#             st.session_state['cards_data'] = nrdb_api.get_all_cards()

#         # all packs info (persistent)
#         if 'packs_data' not in st.session_state:
#             st.session_state['packs_data'] = nrdb_api.get_all_packs()

#         # img storage is persistent between reruns because we don't want to poll API every time
#         if 'imgs' not in st.session_state:
#             st.session_state['imgs'] = {}

#         pack_names = [pack['name'] for pack in st.session_state['packs_data']['data']]
#         pack_names.reverse()
#         chosen_pack = st.selectbox(label='Select a set', options=pack_names, placeholder='Select a set', index=None)

#         if chosen_pack:
#             chosen_pack = list(filter(lambda pack: pack['name'] == chosen_pack, st.session_state['packs_data']['data']))
#             chosen_pack_code = chosen_pack[0]['code']

#             # filter cards (search)
#             filtered_for_pack_code = [card for card in st.session_state['cards_data']['data'] if chosen_pack_code == card['pack_code']]

#             perform_upscale = st.checkbox('Perform ML upscale (slow, higher quality)', key='upscale_3')

#             # get card imgs
#             if st.button(label='Get Images', key='get_imgs_3'):
#                 with st.status("Polling NRDB API..."):
#                     imgs = {}
#                     nrdb_api.get_cardlist_images(filtered_for_pack_code, imgs)
#                     st.session_state['imgs'] = imgs # persistent

#                 # display cards
#                 if len(st.session_state['imgs']) > 0:
#                     # left column 3x grid
#                     col = 0

#                     for card in filtered_for_pack_code:
#                         id = card['code']
#                         with grid[col]:
#                             if id in st.session_state['imgs'].keys():
#                                 st.image(st.session_state['imgs'][id], width=200, caption=card['title'][:28])
#                             else:
#                                 st.write(f'{card['title']}  \nPress :red[Get Images] to refresh')

#                         col = (col + 1) % 3


#                 pre_final = st.session_state['imgs'].values()
#                 if perform_upscale:
#                     upscaler = imgUpscaler('edsr-base', 3)
#                     temp = []
#                     bar = st.progress(0, text='Upscaling images...')
#                     i = 1
#                     # with st.status("Upscaling"):
#                     for bytes_file in st.session_state['imgs'].values():
#                         image = Image.open(bytes_file)
#                         image_bytes = upscaler.process(image)
#                         temp.append(BytesIO(image_bytes))
#                         bar.progress(int(100 * i / len(st.session_state['imgs'].values())), text='Upscaling images...')
#                         i+=1
#                     pre_final = temp

#                 # print result to PDF
#                 resized_proxy_list = resize_images(pre_final)

#                 with st.status("Generating PDF..."):
#                     #make 3x3 image grids
#                     sheets = create_3x3_sheets(resized_proxy_list, nrdb_api.MODE)
#                     st.write('Total sheets: ', len(sheets))

#                     if len(sheets) > 0:
#                         img_byte_arr = BytesIO()
#                         sheets[0].save(img_byte_arr, format='PDF', save_all=True, append_images=sheets[1:])

#                 if len(sheets) > 0:
#                     st.download_button(':arrow_down: :red[Download PDF]', img_byte_arr, file_name=f'{chosen_pack[0]['name']}.pdf')
